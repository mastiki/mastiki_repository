{
	"name": "QueryErrorsPipeline",
	"properties": {
		"activities": [
			{
				"name": "GetFiles",
				"description": "Get files to be processed",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 3,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "SELECT \nDISTINCT \na.filepath(1) as [filename], \na.filepath() as [filepath]\nFROM OPENROWSET (BULK'https://sqldb-prod-c11.azuredatalakestore.net/webhdfs/v1/local/SqlAzure/Production/ssDaily/MonVdwQueryOperation/Parquet/*.0000000.parquet',FORMAT = 'PARQUET')\nas [a]\nWHERE    \ndatediff(day,cast(a.filepath(1) as datetime), convert(date,getutcdate())) <= @{pipeline().parameters.ParameterNumberOfDays}",
						"queryTimeout": "02:00:00"
					},
					"dataset": {
						"referenceName": "SqlOD_SqlTelemetry",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "ForEachFile",
				"description": "Iterates through Cosmos files of interest.",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "GetFiles",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('GetFiles').output.value",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "ProcessQueryErrors",
							"description": "Process query errors for one day.",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 3,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": "with all_distributed_queries as\n(\nSELECT DISTINCT\n\tsubstring([ClusterName_DT_String], charindex('.',[ClusterName_DT_String]) + 1, charindex('.',[ClusterName_DT_String],charindex('.',[ClusterName_DT_String])+1) - charindex('.',[ClusterName_DT_String]) - 1) as Region,\n    [LogicalServerName_DT_String] AS [Endpoint],\n\t[SubscriptionId_DT_String] AS [SubscriptionId],\n\t[distributed_statement_id_DT_String] as [DistributedStatementId]\nFROM OPENROWSET (BULK \n       '@{item().filepath}',\n     FORMAT = 'PARQUET') \nWITH\n(\n\tClusterName_DT_String varchar(100),\n\t[AppTypeName_DT_String] varchar(50),\n\tSubscriptionId_DT_String varchar(50),\n\tLogicalServerName_DT_String varchar(200),\n\tdistributed_statement_id_DT_String varchar(50),\n\teventName_DT_String varchar(200)\n)\n\tAS [b]\nWHERE [AppTypeName_DT_String] like 'Worker.VDW.%' and [eventName_DT_String] = 'vdw_distributed_computation_rpc' and [ClusterName_DT_String] not like '%sqltest%'\n),\nall_failed_queries as\n(\nSELECT DISTINCT\n\tsubstring([ClusterName_DT_String], charindex('.',[ClusterName_DT_String]) + 1, charindex('.',[ClusterName_DT_String],charindex('.',[ClusterName_DT_String])+1) - charindex('.',[ClusterName_DT_String]) - 1) as Region,\n    [LogicalServerName_DT_String] AS [Endpoint],\n\t[SubscriptionId_DT_String] AS [SubscriptionId],\n\t[status_DT_String] AS [QueryStatus],\n\tCAST([originalEventTimestamp_DT_DateTime] as date) as [currentDay],\n\t[distributed_statement_id_DT_String] as [DistributedStatementId],\n\t[sql_error_number_DT_Int64] as sql_error_number,\n\t[sql_error_severity_DT_Int64] as sql_error_severity,\n\t[sql_error_state_DT_Int64] as sql_error_state\nFROM OPENROWSET (BULK \n       '@{item().filepath}',\n     FORMAT = 'PARQUET') \nWITH\n(\n\tClusterName_DT_String varchar(100),\n\t[AppTypeName_DT_String] varchar(50),\n\tSubscriptionId_DT_String varchar(50),\n\tLogicalServerName_DT_String varchar(200),\n\tdistributed_statement_id_DT_String varchar(50),\n\teventName_DT_String varchar(200),\n\t[status_DT_String] varchar(30),\n\t[originalEventTimestamp_DT_DateTime] datetime2,\n\tsql_error_number_DT_Int64\tbigint,\n\tsql_error_severity_DT_Int64\tbigint,\n\tsql_error_state_DT_Int64\tbigint\n)\nAS [a]\nWHERE [AppTypeName_DT_String] like 'Worker.VDW.%' and [eventName_DT_String] = 'vdw_statement_execution' and [ClusterName_DT_String] not like '%sqltest%' and [status_DT_String] = 'Failed'\n),\njoined_data as \n(\nselect all_failed_queries.* from all_failed_queries \ninner join all_distributed_queries on all_failed_queries.Region = all_distributed_queries.Region and all_failed_queries.SubscriptionId = all_distributed_queries.SubscriptionId and all_failed_queries.Endpoint = all_distributed_queries.Endpoint and all_failed_queries.DistributedStatementId = all_distributed_queries.DistributedStatementId\n)\nselect Region, Endpoint, SubscriptionId, QueryStatus, currentDay, sql_error_number, sql_error_severity,sql_error_state, count(*) as numOfFailedQueries from joined_data\ngroup by Region, Endpoint, SubscriptionId, QueryStatus, currentDay, sql_error_number, sql_error_severity,sql_error_state\n",
									"queryTimeout": "08:20:00"
								},
								"sink": {
									"type": "ParquetSink",
									"storeSettings": {
										"type": "AzureBlobStorageWriteSettings"
									}
								},
								"enableStaging": false
							},
							"inputs": [
								{
									"referenceName": "SqlOD_SqlTelemetry",
									"type": "DatasetReference"
								}
							],
							"outputs": [
								{
									"referenceName": "ParquetOutput",
									"type": "DatasetReference",
									"parameters": {
										"container": "adf",
										"folder": "QueryErrors",
										"file": "@concat('query_errors_',item().filename,'.parquet')"
									}
								}
							]
						}
					]
				}
			}
		],
		"parameters": {
			"ParameterNumberOfDays": {
				"type": "string",
				"defaultValue": "7"
			}
		},
		"annotations": []
	}
}