{
	"name": "NumberOfQueriesOverall",
	"properties": {
		"description": "Aggregates daily number of queries (including inactive endpoints).",
		"activities": [
			{
				"name": "GetFiles",
				"description": "Get files to be processed from Cosmos.",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 3,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "SELECT \nDISTINCT \na.filepath(1) as [filename], \na.filepath() as [filepath]\nFROM OPENROWSET (BULK'https://sqldb-prod-c11.azuredatalakestore.net/webhdfs/v1/local/SqlAzure/Production/ssDaily/MonVdwQueryOperation/Parquet/*.0000000.parquet',FORMAT = 'PARQUET')\nas [a]\nWHERE    \ndatediff(day,cast(a.filepath(1) as datetime), convert(date,getutcdate())) <= @{pipeline().parameters.ParameterNumberOfDays}",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00"
					},
					"dataset": {
						"referenceName": "SqlOD_SqlTelemetry",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "ForEachFile",
				"description": "Iterates through the Cosmos streams of interest.",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "GetFiles",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('GetFiles').output.value",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "ProcessNumberOfQueriesOverall",
							"description": "Process one daily number of queries overall file.",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 3,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "with endpointsTotal as\n(\nSELECT DISTINCT\n\t   substring([ClusterName_DT_String], charindex('.',[ClusterName_DT_String]) + 1, charindex('.',[ClusterName_DT_String],charindex('.',[ClusterName_DT_String])+1) - charindex('.',[ClusterName_DT_String]) - 1) as Region,\n\t   [SubscriptionId_DT_String] AS [SubscriptionId], \n       [LogicalServerName_DT_String] AS [Endpoint],\n\t   CAST([originalEventTimestamp_DT_DateTime] as date) as [currentDay]\nFROM OPENROWSET (BULK \n       'https://sqldb-prod-c11.azuredatalakestore.net/webhdfs/v1/local/SqlAzure/Production/ssDaily/MonVdwConfigurations/Parquet/@{item().filename}.0000000.parquet',\n     FORMAT = 'PARQUET') \nWITH\n(\n\tClusterName_DT_String varchar(100),\n\t[AppTypeName_DT_String] varchar(50),\n\tSubscriptionId_DT_String varchar(50),\n\tLogicalServerName_DT_String varchar(200),\n\t[originalEventTimestamp_DT_DateTime] datetime2\n)\n  AS [a]\nWHERE [AppTypeName_DT_String] = 'Worker.VDW.Frontend' and [ClusterName_DT_String] not like '%sqltest%'\n),\nall_queries as\n(\nSELECT DISTINCT\n\tsubstring([ClusterName_DT_String], charindex('.',[ClusterName_DT_String]) + 1, charindex('.',[ClusterName_DT_String],charindex('.',[ClusterName_DT_String])+1) - charindex('.',[ClusterName_DT_String]) - 1) as Region,\n    [LogicalServerName_DT_String] AS [Endpoint],\n\t[SubscriptionId_DT_String] AS [SubscriptionId], \n\tCAST([originalEventTimestamp_DT_DateTime] as date) as [currentDay],\n\t[distributed_statement_id_DT_String] as [DistributedStatementId]\nFROM OPENROWSET (BULK \n       '@{item().filepath}',\n     FORMAT = 'PARQUET') \nWITH\n(\n\tClusterName_DT_String varchar(100),\n\tSubscriptionId_DT_String varchar(50),\n\tLogicalServerName_DT_String varchar(200),\n\toriginalEventTimestamp_DT_DateTime datetime2,\n\tdistributed_statement_id_DT_String varchar(50),\n\teventName_DT_String varchar(200)\n)\n\tAS [b]\nWHERE [eventName_DT_String] = 'vdw_distributed_computation_rpc' and [ClusterName_DT_String] not like '%sqltest%'\n),\nall_queries_summarized as\n(\nselect\n[Region],[Endpoint],[SubscriptionId],[currentDay],count(distinct [DistributedStatementId]) as numOfQueries\nfrom all_queries\ngroup by [Region],[Endpoint],[SubscriptionId],[currentDay]\n)\nselect \nisnull(endpointsTotal.Region,all_queries_summarized.Region) as Region,\nisnull(endpointsTotal.Endpoint,all_queries_summarized.Endpoint) as Endpoint,\nisnull(endpointsTotal.SubscriptionId,all_queries_summarized.SubscriptionId) as SubscriptionId,\nisnull(endpointsTotal.currentDay,all_queries_summarized.currentDay) as currentDay,\nisnull(all_queries_summarized.numOfQueries,0) as numOfQueries\nfrom endpointsTotal\nfull outer join all_queries_summarized on endpointsTotal.Region = all_queries_summarized.Region and endpointsTotal.Endpoint = all_queries_summarized.Endpoint and endpointsTotal.SubscriptionId = all_queries_summarized.SubscriptionId and endpointsTotal.currentDay = all_queries_summarized.currentDay\n",
										"type": "Expression"
									},
									"queryTimeout": "08:20:00"
								},
								"sink": {
									"type": "ParquetSink",
									"storeSettings": {
										"type": "AzureBlobStorageWriteSettings"
									}
								},
								"enableStaging": false
							},
							"inputs": [
								{
									"referenceName": "SqlOD_SqlTelemetry",
									"type": "DatasetReference"
								}
							],
							"outputs": [
								{
									"referenceName": "ParquetOutput",
									"type": "DatasetReference",
									"parameters": {
										"container": "adf",
										"folder": "NumberOfQueriesOverall",
										"file": "@concat('NumberOfQueriesOverall_',item().filename,'.parquet')"
									}
								}
							]
						}
					]
				}
			}
		],
		"parameters": {
			"ParameterNumberOfDays": {
				"type": "int",
				"defaultValue": 7
			}
		},
		"annotations": []
	}
}