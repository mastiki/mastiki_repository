{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "AdfSqlOdTest"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/QueryStatusPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Aggregate daily query status per endpoint.",
				"activities": [
					{
						"name": "GetFiles",
						"description": "Get files to be processed",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nDISTINCT \na.filepath(1) as [filename]\nFROM OPENROWSET (BULK'https://sqldb-prod-c11.azuredatalakestore.net/webhdfs/v1/local/SqlAzure/Production/ssDaily/MonVdwQueryOperation/Parquet/*.*.parquet',FORMAT = 'PARQUET')\nas [a]\nWHERE    \ndatediff(day,cast(a.filepath(1) as datetime), convert(date,getutcdate())) <= @{pipeline().parameters.ParameterNumberOfDays}\n",
									"type": "Expression"
								},
								"queryTimeout": "08:20:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlOD_SqlTelemetry",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachFile",
						"description": "Iterated through Cosmos files of interest.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetFiles').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "ProcessQueryStatus",
									"description": "Process query statuses for one day.",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "with all_distributed_queries as\n(\nSELECT DISTINCT\n\tsubstring([ClusterName_DT_String], charindex('.',[ClusterName_DT_String]) + 1, charindex('.',[ClusterName_DT_String],charindex('.',[ClusterName_DT_String])+1) - charindex('.',[ClusterName_DT_String]) - 1) as Region,\n    [LogicalServerName_DT_String] AS [Endpoint],\n\t[SubscriptionId_DT_String] AS [SubscriptionId],\n\t[distributed_statement_id_DT_String] as [DistributedStatementId]\nFROM OPENROWSET (BULK \n     'https://sqldb-prod-c11.azuredatalakestore.net/webhdfs/v1/local/SqlAzure/Production/ssDaily/MonVdwQueryOperation/Parquet/@{item().filename}.*.parquet',\n     FORMAT = 'PARQUET') \nWITH\n(\n\tClusterName_DT_String varchar(100),\n\t[AppTypeName_DT_String] varchar(50),\n\tSubscriptionId_DT_String varchar(50),\n\tLogicalServerName_DT_String varchar(200),\n\tdistributed_statement_id_DT_String varchar(50),\n\teventName_DT_String varchar(200)\n)\n\tAS [b]\nWHERE [AppTypeName_DT_String] like 'Worker.VDW.%' and [eventName_DT_String] = 'vdw_distributed_computation_rpc' and [ClusterName_DT_String] not like '%sqltest%'\n),\nall_queries as\n(\nSELECT DISTINCT\n\tsubstring([ClusterName_DT_String], charindex('.',[ClusterName_DT_String]) + 1, charindex('.',[ClusterName_DT_String],charindex('.',[ClusterName_DT_String])+1) - charindex('.',[ClusterName_DT_String]) - 1) as Region,\n    [LogicalServerName_DT_String] AS [Endpoint],\n\t[SubscriptionId_DT_String] AS [SubscriptionId],\n\t[status_DT_String] AS [QueryStatus],\n\tCAST([originalEventTimestamp_DT_DateTime] as date) as [currentDay],\n\t[distributed_statement_id_DT_String] as [DistributedStatementId]\nFROM OPENROWSET (BULK \n     'https://sqldb-prod-c11.azuredatalakestore.net/webhdfs/v1/local/SqlAzure/Production/ssDaily/MonVdwQueryOperation/Parquet/@{item().filename}.*.parquet',\n     FORMAT = 'PARQUET') \nWITH\n(\n\tClusterName_DT_String varchar(100),\n\t[AppTypeName_DT_String] varchar(50),\n\tSubscriptionId_DT_String varchar(50),\n\tLogicalServerName_DT_String varchar(200),\n\tdistributed_statement_id_DT_String varchar(50),\n\teventName_DT_String varchar(200),\n\t[status_DT_String] varchar(30),\n\t[originalEventTimestamp_DT_DateTime] datetime2\n)\nAS [a]\nWHERE [AppTypeName_DT_String] like 'Worker.VDW.%' and [eventName_DT_String] = 'vdw_statement_execution' and [ClusterName_DT_String] not like '%sqltest%' and [status_DT_String] <> 'Started'\n),\njoined_data as \n(\nselect all_queries.* from all_queries \ninner join all_distributed_queries on all_queries.Region = all_distributed_queries.Region and all_queries.SubscriptionId = all_distributed_queries.SubscriptionId and all_queries.Endpoint = all_distributed_queries.Endpoint and all_queries.DistributedStatementId = all_distributed_queries.DistributedStatementId\n)\nselect \n\tRegion,SubscriptionId,Endpoint,currentDay,\n\tcount(distinct DistributedStatementId) as numOfQueries,\n\tsum(case when QueryStatus = 'Succeeded' then 1 else 0 end) as numOfQueries_succeeded,\n\tsum(case when QueryStatus = 'Failed' then 1 else 0 end) as numOfQueries_failed,\n\tsum(case when QueryStatus = 'Canceled' then 1 else 0 end) as numOfQueries_canceled\nfrom joined_data\ngroup by Region,SubscriptionId,Endpoint,currentDay\n",
												"type": "Expression"
											},
											"queryTimeout": "08:20:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "SqlOD_SqlTelemetry",
											"type": "DatasetReference"
										}
									],
									"outputs": [
										{
											"referenceName": "ParquetOutput",
											"type": "DatasetReference",
											"parameters": {
												"container": "adf",
												"folder": "QueryStatus",
												"file": "@concat('query_status_',item().filename,'.parquet')"
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"ParameterNumberOfDays": {
						"type": "int",
						"defaultValue": 7
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SF_CosmosTest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ScopeTest",
						"description": "Test running scope script via ADF.",
						"type": "DataLakeAnalyticsScope",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"scriptFolderPath": "local/mastiki/myScripts",
							"scriptFileName": "GetClusterLoad_IDSU.script",
							"scriptLinkedService": {
								"referenceName": "AzureDataLakeStore",
								"type": "LinkedServiceReference"
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDataLakeAnalytics",
							"type": "LinkedServiceReference"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStore')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeAnalytics')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SF_cosmos_copy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureDataLakeStoreReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetOutput",
								"type": "DatasetReference",
								"parameters": {
									"container": "adf",
									"folder": "test_cosmos",
									"file": "copied_file.csv"
								}
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SF_cosmos_test_v2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "U-SQL_test",
						"type": "DataLakeAnalyticsU-SQL",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"scriptPath": "local/mastiki/myScripts/GetClusterLoad_IDSU.script",
							"scriptLinkedService": {
								"referenceName": "AzureDataLakeStore",
								"type": "LinkedServiceReference"
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDataLakeAnalytics",
							"type": "LinkedServiceReference"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStore')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeAnalytics')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStore",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureDataLakeStoreLocation",
						"fileName": "cluster_load_test_scope.csv",
						"folderPath": "local/mastiki"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStore')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeAnalytics')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDataLakeAnalytics",
				"typeProperties": {
					"accountName": "sqldb-adhoc-c11",
					"servicePrincipalId": "853be818-067c-4d0b-b56d-48f2e4c6322e",
					"servicePrincipalKey": {
						"type": "SecureString",
						"value": "**********"
					},
					"tenant": "72f988bf-86f1-41af-91ab-2d7cd011db47",
					"subscriptionId": "c0ef33fb-9268-49e4-a0d8-54297948ad8b",
					"resourceGroupName": "conv"
				},
				"connectVia": {
					"referenceName": "ScopeActivityRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStore')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDataLakeStore",
				"typeProperties": {
					"dataLakeStoreUri": "https://sqldb-adhoc-c11.azuredatalakestore.net/webhdfs/v1",
					"servicePrincipalId": "853be818-067c-4d0b-b56d-48f2e4c6322e",
					"servicePrincipalKey": {
						"type": "SecureString",
						"value": "**********"
					},
					"tenant": "72f988bf-86f1-41af-91ab-2d7cd011db47",
					"subscriptionId": "c0ef33fb-9268-49e4-a0d8-54297948ad8b",
					"resourceGroupName": "conv"
				},
				"connectVia": {
					"referenceName": "ScopeActivityRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStoreCosmosStructuredStream1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDataLakeStoreCosmosStructuredStream",
				"typeProperties": {
					"accountName": "sqldb-prod-c11",
					"servicePrincipalId": "853be818-067c-4d0b-b56d-48f2e4c6322e",
					"servicePrincipalKey": {
						"type": "SecureString",
						"value": "**********"
					},
					"tenant": "72f988bf-86f1-41af-91ab-2d7cd011db47",
					"subscriptionId": "c071af7d-3311-4dda-aa85-18afdeaed3a0",
					"resourceGroupName": "conv"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TriggerBillingPerEndpoint')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Triggers BillingPerEndpoint pipeline, daily, last 5 days.",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "BillingPerEndpointPipeline",
							"type": "PipelineReference"
						},
						"parameters": {
							"ParameterNumberOfDays": 5
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-08-24T22:00:00.000Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": []
		}
	]
}